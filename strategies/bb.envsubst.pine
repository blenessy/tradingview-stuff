//@version=5
strategy(shorttitle=$SHORT_TITLE, title=$TITLE, overlay=true, pyramiding=$PYRAMIDING, margin_long=$MARGIN_PERCENT, margin_short=$MARGIN_PERCENT, initial_capital=$INITIAL_CAPITAL, commission_type=$COMMISSION_TYPE, commission_value=$COMMISSION_PERCENT)

// Smoothing inputs
smoothingTypeInput = input.string($SMOOTHING_TYPE, 'Method:', options=["ALMA", 'EMA', 'SMA', 'WMA', 'VWMA', 'RMA', 'HMA'], inline="MA", group="Smoothing")
smoothingLengthInput = input.int($SMOOTHING_LENGTH, 'Length:', minval=2, inline="MA", group="Smoothing")
almaOffsetInput = input.float($ALMA_OFFSET, "ALMA offset:", step=0.01, minval=0.01, inline="ALMA", group="Smoothing")
almaSigmaInput = input.float($ALMA_SIGMA, "Sigma:", step=0.1, minval=0.1, inline="ALMA", group="Smoothing")

// Bollinger Bands inputs
timeframeInput = input.timeframe($BB_TIMEFRAME, "Resolution:", group="Bollinger Bands")
devTypeInput = input.string($DEVIATION_TYPE, 'Deviation:', options=['STD', 'MEAN', 'ATR'], group="Bollinger Bands")
upperInput = input.source($BB_UPPER, "Upper:", inline="Upper", group="Bollinger Bands")
upperMultInput = input.float($DEVIATION_MULT_UPPER, 'Factor:', minval=0.01, maxval=50, step=0.1, inline="Upper", group="Bollinger Bands")
lowerInput = input.source($BB_LOWER, "Lower:", inline="Lower", group="Bollinger Bands")
lowerMultInput = input.float($DEVIATION_MULT_LOWER, 'Factor:', minval=0.01, maxval=50, step=0.1, inline="Lower", group="Bollinger Bands")
baseInput = input.source($BB_BASE, "Middle:", inline="Base", group="Bollinger Bands", tooltip="Only cosmetical value")

// Trade Inputs
tradeTypeInput = input.string($TRADE_TYPE, 'Trade Type:', options=['long', 'short', 'long+short'], inline="qd", group="Trading")
tradeSizeInput = input.float($TRADE_SIZE, 'TSize:', minval=0.001, step=0.001, inline="qd", group="Trading")
buyInput = input.source($TRADE_BUY_SOURCE, "Buy Source:", inline="Buy", group="Trading")
buyOffsetInput = input.float($TRADE_BUY_OFFSET, 'Offset:', step=0.0001, inline="Buy", group="Trading")
buyVWAPInput = input.bool($TRADE_BUY_VWAP, "VWAP", inline="Buy", group="Trading")
sellInput = input.source($TRADE_SELL_SOURCE, "Sell Source:", inline="Sell", group="Trading")
sellOffsetInput = input.float($TRADE_SELL_OFFSET, 'Offset:', step=0.0001, inline="Sell", group="Trading")
sellVWAPInput = input.bool($TRADE_SELL_VWAP, "VWAP", inline="Sell", group="Trading")
minPriceImprovementInput = input.float($TRADE_MIN_PRICE_IMPROVEMENT, 'Minimal Price Improvement:', minval=0.01, maxval=2, step=0.01,
     inline="MPI", group="Trading", tooltip="Only buy if new price improves on position price by this factor.")

// Development related
lockedInput = input.bool($DEVELOPMENT_LOCKED, "Lock Ticker and Timeframe", inline="Lock", group="Development")

if lockedInput and timeframe.period != $CHART_TIMEFRAME
    runtime.error("expecting chart timeframe: " + $CHART_TIMEFRAME)

if lockedInput and syminfo.tickerid != $CHART_TICKERID
    runtime.error("expecting tickerid: " + $CHART_TICKERID)

// MA Chooser function
movingAverage(source, length) =>
    switch smoothingTypeInput
        "ALMA" => ta.alma(source, length, almaOffsetInput, almaSigmaInput)
        "EMA" => ta.ema(source, length)
        "HMA" => ta.ema(source, length)
        "RMA" => ta.rma(source, length)
        "SMA" => ta.sma(source, length)
        "VWMA" => ta.vwma(source, length)
        "WMA" => ta.wma(source, length)
        => na

// Deviation chooser function
deviation(source, length) =>
    switch devTypeInput
        "STD" => ta.stdev(source, length)
        "MEAN" => ta.dev(source, length)
        "ATR" => ta.atr(length)
        => na

// Get signals
base = request.security(syminfo.tickerid, timeframeInput, baseInput, $BARMERGE_GAPS, $BARMERGE_LOOKAHEAD)
upper = request.security(syminfo.tickerid, timeframeInput, upperInput, $BARMERGE_GAPS, $BARMERGE_LOOKAHEAD)
lower = request.security(syminfo.tickerid, timeframeInput, lowerInput, $BARMERGE_GAPS, $BARMERGE_LOOKAHEAD)

// Parts of the BB
basis = movingAverage(base, smoothingLengthInput)
upperBand = movingAverage(upper, smoothingLengthInput) + upperMultInput * deviation(upper, smoothingLengthInput)
lowerBand = movingAverage(lower, smoothingLengthInput) - lowerMultInput * deviation(lower, smoothingLengthInput)

// Sort out the buy / sell signals
buy = buyVWAPInput ? ta.vwap(buyInput) : buyInput
sell = sellVWAPInput ? ta.vwap(sellInput) : sellInput

// Plotting
bbFill = (last_bar_index - bar_index) < smoothingLengthInput ? color.new(color.white, 95) : color.new(color.gray, 95)
tradeFill = color.new(color.teal, 50)
plot(basis, 'BB Middle', color=color.new(color.white, 30), linewidth=0, style=plot.style_circles)
p1 = plot(upperBand, 'BB Upper', color=color.new(color.white, 0), linewidth=1)
p2 = plot(lowerBand, 'BB Lower', color=color.new(color.white, 0), linewidth=1)
fill(p1, p2, color=bbFill)
p3 = plot(buy, 'Buy', color=tradeFill, linewidth=1)
p4 = plot(sell, 'Sell', color=tradeFill, linewidth=1)
fill(p3, p4, color=tradeFill)

// isBuyEvent/isSellEvent is used to prevent re-triggering of alerts
isBuyEvent = buyOffsetInput >= 0 ? buy < lowerBand : buy > lowerBand
isSellEvent = sellOffsetInput >= 0 ? sell > upperBand : sell < upperBand

// Filter out bad trades
shouldBuy = isBuyEvent and (buyOffsetInput >= 0 ? lowerBand / buy - 1 : buy / lowerBand - 1) > math.abs(buyOffsetInput)
shouldSell = isSellEvent and (sellOffsetInput >= 0 ? sell / upperBand - 1 : upperBand / sell - 1) > math.abs(sellOffsetInput)

// Make sure consecutive buys/sells improve the average position price
okOpenLong = na(strategy.position_avg_price) or strategy.position_avg_price >= (buy * minPriceImprovementInput)
okOpenShort = na(strategy.position_avg_price) or strategy.position_avg_price <= (sell / minPriceImprovementInput)

// Set maximum drawdown in percent of maximum equity
strategy.risk.max_drawdown($RISK_MAX_DRAWDOWN, strategy.percent_of_equity)

// Entry & Exit
if str.match(tradeTypeInput, "\\blong\\b") == "long"
    strategy.close("buy", when=shouldSell)
if str.match(tradeTypeInput, "\\bshort\\b") == "short"
    strategy.close("sell", when=shouldBuy)
if str.match(tradeTypeInput, "\\blong\\b") == "long"
    strategy.entry("buy", strategy.long, when=shouldBuy and okOpenLong, qty=tradeSizeInput)
if str.match(tradeTypeInput, "\\bshort\\b") == "short"
    strategy.entry("sell", strategy.short, when=shouldSell and okOpenShort, qty=tradeSizeInput)
